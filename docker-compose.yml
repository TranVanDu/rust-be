version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      RUST_LOG: 'info'
      ENV: '${ENV}'
      APP.WEB.ADDR: '0.0.0.0:8080'
      APP.POSTGRES.DSN: 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}'
      APP.POSTGRES.MAX_CONNS: '10'
      APP.JWT_SECRET_KEY: '${JWT_SECRET_KEY}'
      APP.ACCESS_TOKEN_DURATION_DAYS: '$${APP.ACCESS_TOKEN_DURATION_DAYS}'
      APP.REFRESH_TOKEN_DURATION_DAYS: '$${APP.REFRESH_TOKEN_DURATION_DAYS}'
      APP.PHONE_CODE_TTL_MINUTES: '$${APP.PHONE_CODE_TTL_MINUTES}'
      APP.ACCESS_TOKEN_SET_PASSWORD_MINUTES: '$${APP.ACCESS_TOKEN_SET_PASSWORD_MINUTES}'
      APP.TWILIO_AUTH_TOKEN: '$${APP.TWILIO_AUTH_TOKEN}'
      APP.TWILIO_ACCOUNT_SID: '$${APP.TWILIO_ACCOUNT_SID}'
      APP.TWILIO_FROM_NUMBER: '$${APP.TWILIO_FROM_NUMBER}'
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_DB: '${POSTGRES_DB}'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'

volumes:
  pgdata:
